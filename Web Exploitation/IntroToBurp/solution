The hints gave us more details about the objective of this challenge:

Hint 1: Try using burpsuite to intercept requests to capture the flag.
Hint 2: Try mangling the request, maybe their server-side code doesn’t handle malformed requests very well.
Clear enough instructions. Let’s get to work using our trusty Burp Suite.

Tip: For this kind of exercise it is turn on Burp’s proxy Intercept.

When you load the target website, you are presented with a Registration form. After a few tests, it became evident that this form will always accept any input and redirect you to the next page. Just put in any details for now.

Stage 1: Registration Form
Once you are redirected to the “2fa” page, this is where I believe the magic happens. Our objective is to try and manipulate this outgoing POST request to send a malformed request to the server.

Stage 2: Sending 2FA (OTP) code to the server
This is what our intercepted POST request with our random OTP data.

Burp intercepted a POST request with a 2FA code
I must admit I’ve overcomplicated this challenge and have attempted numerous methods to mangle the request as follows:

Header manipulation (User-Agent, Origin, Referer, Host, Content-Type, etc.)
Request Method manipulation (POST vs GET)
OTP value (letters, symbols, large input, NULL, injections, etc.)
But sometimes, the simplest solution is the most effective one:

Not sending an OTP at all!

Removing OTP from the HTTP request
By removing the OTP from the HTTP request altogether, I found success. It might seem like a basic approach, but hey, sometimes simplicity is key, especially when it’s an introduction to Burp! Interestingly, the web application didn’t seem to have any form of validation or verification to ensure that a mandatory field like “otp” was actually sent or present in the request.

Voila! We now have an interesting response from the server (see the right pane) with our anticipated goodie!

This web vulnerability is related to Parameter Tampering, where the attacker “tampers” with the parameters or data sent in a request to manipulate the application’s behaviour or bypass a security measure.
This type of attack can lead to unauthorized access, data manipulation or other malicious actions depending on the functionality of the application.
Our target website should have implemented strict validation on all input fields, including mandatory fields like OTP. The server should reject requests that are missing mandatory parameters.

picoCTF{#0TP_Bypvss_SuCc3$S_b3fa4f1a}

